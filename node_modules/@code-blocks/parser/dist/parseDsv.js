"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var ramda_1 = require("ramda");
var castType = function (cell) {
    if (cell === 'true') {
        return true;
    }
    if (cell === 'false') {
        return false;
    }
    var num = Number(cell);
    if (!Number.isNaN(num)) {
        return num;
    }
    return cell;
};
var separateLine = function (separator) {
    return function (line) {
        return line
            .split(separator)
            .map(ramda_1.trim);
    };
};
exports.default = (function (separator) {
    return function (content) {
        var _a = content.split('\n').map(separateLine(separator)), head = _a[0], body = _a.slice(1);
        var data = body
            .map(function (line) {
            return head.reduce(function (r, key, i) {
                var _a;
                return (__assign(__assign({}, r), (_a = {}, _a[String(key)] = castType(line[i]), _a)));
            }, {});
        })
            .filter(function (d) {
            return Object.keys(d).length === head.length
                && Object.keys(d).every(function (key) { return !ramda_1.isNil(ramda_1.path([key], d)); });
        });
        if (data.length === 0) {
            throw new Error("\n        Could not parse as DSV with \"" + separator + "\" separator:\n        " + content + "\n      ");
        }
        return { head: head, data: data };
    };
});
