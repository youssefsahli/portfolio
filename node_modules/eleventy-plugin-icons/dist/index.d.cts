type Options = {
    mode: 'inline' | 'sprite';
    sources: {
        name: string;
        path: string;
        default?: boolean;
        getFileName?: (icon: string) => string;
    }[];
    icon: {
        shortcode: string;
        delimiter: string;
        transform: (content: string) => Promise<string>;
        class: (name: string, source: string) => string;
        id: (name: string, source: string) => string;
        attributes: {
            [x: string]: string;
        };
        attributesBySource: {
            [x: string]: {
                [x: string]: string;
            };
        };
        overwriteExistingAttributes: boolean;
        errorNotFound: boolean;
    };
    sprite: {
        shortcode: string;
        attributes: {
            [x: string]: string;
        };
        extraIcons: {
            all: boolean;
            sources: string[];
            icons: {
                name: string;
                source: string;
            }[];
        };
        writeFile: false | string;
    };
};

type DeepPartial<T> = T extends Function | Array<any> ? T : T extends object ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : T | undefined;
type Prettify<T> = {
    [K in keyof T]: T extends object ? Prettify<T[K]> : T[K];
} & {};

declare function export_default(eleventyConfig: any, opts: Prettify<DeepPartial<Options>>): void;

export { export_default as default };
