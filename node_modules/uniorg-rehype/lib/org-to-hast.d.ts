import type { Properties, Node, Element, Root } from 'hast';
import type { OrgNode, OrgData } from 'uniorg';
declare module 'unist' {
    interface Data {
        hProperties?: Properties;
    }
}
type Hast = Root['children'][number];
type Handler<T> = (this: OrgToHast, org: T) => Hast | null | (Hast | null)[];
export type Handlers = {
    [K in OrgNode['type']]?: Handler<OrgNode & {
        type: K;
    }>;
};
export interface OrgToHastOptions {
    imageFilenameExtensions: string[];
    /**
     * Whether to wrap org sections into <section>.
     */
    useSections: boolean;
    /**
     * A function to wrap footnotes. First argument of the function is
     * an array of all footnote definitions and the function should
     * return a new Hast node to be appended to the document.
     *
     * Roughly corresponds to `org-html-footnotes-section`.
     *
     * Default is:
     * ```
     * <h1>Footnotes:</h1>
     * {...footnotes}
     * ```
     */
    footnotesSection: (footnotes: Hast[]) => Hast[];
    handlers: Handlers;
}
export declare function orgToHast(org: OrgData, opts?: Partial<OrgToHastOptions>): Hast | Root | null;
declare class OrgToHast {
    private options;
    private footnotesOrder;
    private footnotes;
    private handlers;
    constructor(options: Partial<OrgToHastOptions>);
    toHast(node: OrgNode | null, parent: OrgNode | null): Root | Hast | null;
    toHast(node: (OrgNode | null)[], parent: OrgNode | null): (Hast | null)[];
    /**
     * Similar to `hast` but respects `hProperties`.
     */
    h(node: OrgNode | null, selector?: string, properties?: Properties, children?: string | Node | null | Array<string | Node | null>): Element;
}
export {};
